package game;

import ui.*;

/**
 * 主机
 * @author svitter
 *
 */
public class Host {

	/** 限制最大的玩家人数*/
	static int MAX_PLAYER = 4;

	/** 玩家组(用于保存各类信息)*/
	private Player userGroup[];

	/**当前操作玩家的编号 */
	private int handleUser;

	/** 当前玩家的人数*/
	public int joined_userNum; 
	
	/**  玩家的总人数 */
	public int whole_userNum; 

	/** 黑牌的数量*/
	private int bnum;

	/** 白牌的数量*/
	private int wnum;

	/** 黑牌的剩余 */
	private int blackGroup[];

	/** 白牌的剩余 */
	private int whiteGroup[];

	/**
	 * 主机优先，胜者优先
	 * @param whole_userNum
	 */
	public Host(int whole_userNum) {
		this.whole_userNum = whole_userNum;
		handleUser = 0;
		joined_userNum = 0;

		userGroup = new Player[4];
		reset();
//		Menu.cout("DEBUG: finish buildhost");
	}

	/**
	 * 重新开始游戏，重置所有数据
	 */
	public void reset() {
		bnum = wnum = 11;
		blackGroup = new int[12];
		whiteGroup = new int[12];
		for (int i = 0; i < 12; i++)
			blackGroup[i] = whiteGroup[i] = i;

		for (int i = 0; i < handleUser; i++)
			userGroup[i].lose = false;
		
		startGame();
	}
	
	/**
	 * 人数到齐后，开始游戏
	 */
	public void startGame() {


	}

	/** 获取当前玩家的牌 */
	public BoardGroup getUserBoard(int uid) {
		// task
		return userGroup[uid].boardGroup;
	}

	/** 显示所有玩家的牌;*/
	public void showAll() {
		for (int i = 0; i < whole_userNum; i++) {
			for (int j = 0; j < userGroup[i].boardGroup.boardNum; j++) {
				System.out.println("User: " + userGroup[i].name);
				userGroup[i].boardGroup.hideShow();
				System.out.println("");
			}
		}
	}

	/** 循环进行游戏，下一个玩家*/
	public void nextUser() {
		this.handleUser++;
		if (handleUser >= whole_userNum)
			handleUser %= whole_userNum;
	}

	/** 加入新的玩家 */
	public int joined_userNum() {
		return joined_userNum;
	}
	
	/** 加入新的玩家，并且返回新玩家的玩家编号 */
	public int new_joinUser() {
		return joined_userNum++;
	}

	/** 下一个是谁*/
	public String whosNext() {
		return userGroup[(handleUser + 1) % whole_userNum].name;
	}

	/** 现在是谁的Turn*/
	public String whosNow() {
		return userGroup[handleUser].name;
	}

	/** 决定谁先进行游戏*/
	public int whosFirst() {
		return FrontInfor.whosFirst();
	}

	/** 获取新的牌 */
	public int getNewBoard(int color) {
		// 确定牌的颜色
		
		// get black board
		if (color == 0) {
			int temp = (int) ((Math.random()) * 12);
			int tmp;
			tmp = blackGroup[bnum];
			blackGroup[bnum] = blackGroup[temp];
			blackGroup[temp] = tmp;
			bnum--;
			return whiteGroup[bnum + 1];
		}

		// get white board
		else {
			int temp = (int) ((Math.random()) * 12);
			int tmp;
			tmp = whiteGroup[wnum];
			whiteGroup[wnum] = whiteGroup[temp];
			whiteGroup[temp] = tmp;
			wnum--;
			return whiteGroup[wnum + 1];
		}
	}
	
	/** 判定当前牌是否猜测数字，并且返回猜中或者猜错*/
	public boolean judgeBoard(int num, int uid, int val) {
		if (userGroup[uid].boardGroup.guessBoard(num, val))
			return true;
		return false;
	}
	
	/**
	 * 分配牌
	 */
	public void assign() {
		for(int i = 0; i < whole_userNum; i++) {
			/**
			 * 开始获取三张牌
			 *依据想要的颜色
			 */
			for(int j = 0; j < 3; j++) {

			}
		}
		
	}
}

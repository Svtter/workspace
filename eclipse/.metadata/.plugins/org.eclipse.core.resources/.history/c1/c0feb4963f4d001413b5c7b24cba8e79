package game;


/**
 * 牌组类
 * @author svitter
 *
 */
public class BoardGroup {
	//
	public Board own[]; // 拥有的牌
	public int boardNum; //
	private int curNum; // curNum of board
	boolean showAll;
	Board newBoard;

	/**
	 * 
	 * @param num
	 */
	public BoardGroup(int num) {
		own = new Board[30];
		curNum = 0;
		showAll = false;
		newBoard = new Board();
	}

	/**
	 * 以自己的角度显示当前的牌
	 */
	public void showOwn() {
		if (curNum == 0)
			System.out.println("No Board.");
		for (int i = 0; i <= curNum; i++) {
			own[i].ownOut();
		}
		System.out.println("");
	}

	/**
	 * 以他人的角度显示当前的牌
	 * @return
	 */
	public boolean hideShow() {
		boolean all = true;
		for (int i = 0; i <= curNum; i++) {
			if (!own[i].hide) {
				all = false;
			}
			own[i].out();
		}
		System.out.println("");
		return showAll = all;
	}

	/**
	 * 添加新的牌
	 * @param b
	 */
	public void add(Board b) {
		curNum++;
		own[curNum] = b;
		sort();
	}

	/**
	 * 将牌重新排序
	 */
	public void sort() {
		Board temp;
		for (int i = 0; i < boardNum; i++) {
			for (int j = 0; j < boardNum - i; j++) {
				if (own[j].num > own[j + 1].num) {
					temp = own[j];
					own[j] = own[j + 1];
					own[j + 1] = temp;
				} else if (own[j].num == own[j + 1].num) {
					if (own[j].color == 0) {
						temp = own[j];
						own[j] = own[j + 1];
						own[j + 1] = temp;
					}
				}
			}
		}
	}

	/**
	 * 改变牌的信息
	 * @param num
	 */
	private void changeBoard(int num) {
		own[num].hide = false;
	}

	/**
	 * 获取当前的牌 
	 * @param num
	 * @return
	 */
	private int getBoard(int num) {
		return own[num].num;
	}

	/**
	 * 比较当前的牌
	 * @param num
	 * @param val
	 * @return
	 */
	private boolean cmp(int num, int val) {
		if (getBoard(num) == val)
			return true;
		else
			return false;
	}

	/**
	 * 猜测当前的牌
	 * @param num
	 * @param val
	 * @return
	 */
	public boolean guessBoard(int num, int val) {
		if (cmp(num, val)) {
			changeBoard(num);
			return true;
		} else
			return false;
	}
}

/**
 * color0 means black color1 means white show or not belong to Board
 * 
 * @author svitter
 *
 */
class Board {
	int num;
	boolean hide;
	int color;

	public Board() {
		color = -1;
		num = -1;
		hide = true;
	}

	/**
	 * 初始化包含各种属性的排
	 * 
	 * @param color
	 * @param num
	 * @param hide
	 */
	public Board(int color, int num, boolean hide) {
		this.color = color;
		this.num = num;
		this.hide = hide;
	}

	/**
	 * 显示当前牌
	 */
	public void out() {
		if (color == 0)
			System.out.print("B");
		else
			System.out.print("W");
		if (this.hide)
			System.out.print("* ");
		else
			System.out.print(num + " ");
	}

	/**
	 * 以自己的角度显示牌
	 */
	public void ownOut() {
		if (color == 0)
			System.out.print("B");
		else
			System.out.print("W");
		System.out.print(num + " ");
	}
}

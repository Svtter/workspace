package game;

import Communication.SendInfor;
import ui.*;

/**
 * 需要使用Client作为媒介
 * 玩家类
 * @author svitter
 *
 */
public class Player{
    public int uid;
    public String name;
    public boolean lose;
    public BoardGroup boardGroup;
    public SendInfor si;

    /** TODO:可以从文件中读取*/
    public Player(String name) {
        this.name = name;
        this.boardGroup = new BoardGroup();
        lose = false;
    }
    
    /** 以他人的角度显示牌 */
    public void hideShow () {
    	if(boardGroup.showAll)
    		lose = true;
    	boardGroup.hideShow();
    }

    /**
     * 显示自己的牌（自己的角度）
     */
    public void showOwn() {
    	boardGroup.showOwn();
    }
    
    /**
     * 攻击
     * @param host 主机
     * @param no	攻击的牌
     * @param uid	攻击的玩家编号
     * @param num	猜测的数字
     * @return		是否攻击成功
     */
    public boolean attack(Host host, int num, int objId, int val) {
    	if(host.judgeBoard(num, objId, val)) {
    		return true;
    		// show
    	}
    	return false;
    }

    /**
     * 轮到我的回合
     * @param host
     */
    public void MyTurn(Host host) {
    	boolean get = true;
    	while(get) {
    		// 信息出存在sendinfor中
    		si = FrontInfor.chooseCommand(Command.TURN);
			switch (si.command) {
			case ATTACK:
				si = FrontInfor.attack();
				get = attack(host, si.objPos, si.objId, si.objVal);
				FrontInfor.attackSuccess(get);
				break;
			case HELP:
				Menu.helpMenu();
				break;
			case PASS:
				FrontInfor.pass();
				get = false;
				break;
			default:
				Menu.error("choose PASS|HELP|ATTACK");
				break;
			}
    	}
		FrontInfor.exitTurn(si);
    }

    /**
     *  use to confirm the request return or not
     * @return
     */
    public boolean command() {
        return true;
    }
}